import { Inject, UnauthorizedException } from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { Connection, getManager } from 'typeorm';
import { Request } from 'express';
import { AuthService } from 'src/auth/auth.service';

export class RadicacionRepository {
  private radicacionRepository: Connection;
  private conexion: string;

  constructor(
    @Inject(REQUEST) request: Request,
    private readonly authService: AuthService
  ) {
    try {
      const token = request.headers.authorization.split(' ')[1];
      this.conexion = authService.getConnectionWithToken(token);
      this.radicacionRepository = getManager(this.conexion).connection;
    } catch (error) {
      throw new UnauthorizedException('NO ESTAS AUTHENTICADO', error.message);
    }
  }

  async resumen(
    fechaInicio: string,
    fechaFin: string,
    centro1: number,
    centro2: number
  ) {
    if (centro1 == 1 && centro2 == 2) {
      return await this.radicacionRepository.manager.query(
        `SELECT
        COUNT(SFATOTFAC)FACTURAS,

        SUM(SFATOTFAC) TOTALFACTURADO,

        COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) AS ANULADAS,
		COUNT(CASE WHEN SFATIPDOC IN(0) THEN SLNFACTUR ELSE NULL END)PARTICULAR,

        SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END) AS TOTALANULADO,

        COUNT(CASE WHEN SFATIPDOC IN(1, 16) THEN SLNFACTUR ELSE NULL END)
	    	-COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) RADICABLES,

        SUM(CASE WHEN SFATIPDOC IN(0, 1, 16) THEN SFATOTFAC ELSE NULL END)
	    	-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(0, 1, 16)THEN SFATOTFAC ELSE NULL END) TOTALRADICABLE,

        COUNT(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) RADICADOS,

        SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) TOTALRADICADO,

        (SUM(CRDVALRAD)/(SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)))*100 CUMPLIMIENTO,
        
		COUNT(CASE WHEN SLNFACTUR IS NOT NULL AND SFATIPDOC IN(1, 16) THEN SLNFACTUR ELSE NULL END) 
        - COUNT(CASE WHEN CRNRADFACC IS NOT NULL THEN CRNRADFACC ELSE NULL END)
        - COUNT(CASE WHEN CRNRADFACC IS NULL AND SFADOCANU = 1 AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) PENDIENTES,

        SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) TOTALPENDIENTES
          FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
          AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 3, 4)
      `,
        [fechaInicio, fechaFin, centro1, centro2]
      );
    } else {
      return await this.radicacionRepository.manager.query(
        `SELECT
        COUNT(SFATOTFAC)FACTURAS,

        SUM(SFATOTFAC) TOTALFACTURADO,

        COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) AS ANULADAS,
		COUNT(CASE WHEN SFATIPDOC IN(0) THEN SLNFACTUR ELSE NULL END)PARTICULAR,

        SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END) AS TOTALANULADO,

        COUNT(CASE WHEN SFATIPDOC IN(1, 16) THEN SLNFACTUR ELSE NULL END)
		-COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) RADICABLES,

        SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16)THEN SFATOTFAC ELSE NULL END) TOTALRADICABLE,

        COUNT(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) RADICADOS,

        SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) TOTALRADICADO,

        (SUM(CRDVALRAD)/(SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)))*100 CUMPLIMIENTO,
        
		COUNT(CASE WHEN SLNFACTUR IS NOT NULL AND SFATIPDOC IN(1, 16) THEN SLNFACTUR ELSE NULL END) 
        - COUNT(CASE WHEN CRNRADFACC IS NOT NULL THEN CRNRADFACC ELSE NULL END)
        - COUNT(CASE WHEN CRNRADFACC IS NULL AND SFADOCANU = 1 AND SFATIPDOC IN(1, 16) THEN SFADOCANU ELSE NULL END) PENDIENTES,

        SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(1, 16) THEN SFATOTFAC ELSE NULL END)
		-SUM(CASE WHEN SFATIPDOC IN(1, 16) THEN CRDVALRAD ELSE NULL END) TOTALPENDIENTES
        FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 AND ADNCENATE IN(@2, @3)
        AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
    `,
        [fechaInicio, fechaFin, centro1, centro2]
      );
    }
  }

  async radicacionPendiente(fechaInicio, fechaFin) {
    return await this.radicacionRepository.manager.query(
      `
    SELECT 
    COUNT(*) Cantidad,
    SUM((CC.CCVALOR + CC.CCVALDEB - (CC.CCVALCRE + CC.CCVALTRA + CC.CCVALABO))) Total
          FROM GCVRADFACTUR R
          LEFT JOIN CRNCXC C ON C.CXCDOCUME = R.SFANUMFAC
          LEFT JOIN CRNCXCC CC ON CC.CRNCXC = C.OID
          LEFT JOIN CRNACTENFACF AEF ON AEF.CRNCXC = C.OID
          LEFT JOIN CRNESTACTENT EAE ON EAE.OID = AEF.CRNESTACTENT
          WHERE
          CRNRADFACC IS NULL
          AND SFADOCANU = 0 
          AND SFATIPDOC IN(1, 16)
          AND CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
          AND (CC.CCVALOR + CC.CCVALDEB - (CC.CCVALCRE + CC.CCVALTRA + CC.CCVALABO)) > 0
          AND EAE.CRAENOMBRE IS NULL --ESTADO DE ENTREGAGA DE LA FACTURA`,
      [fechaInicio, fechaFin]
    );
  }

  async radAcumulada(
    fechaInicio: string,
    fechaFin: string,
    centro1: number,
    centro2: number
  ) {
    if (this.conexion === 'AC') {
      if (centro1 === 1 && centro2 === 2) {
        return await this.radicacionRepository.manager.query(
          `SELECT
          DAY(SFAFECFAC) DIA,
          SUM(CASE WHEN CRFESTADO IN(-1, 0, 1, 2, 3) THEN CRDVALRAD ELSE NULL END) RADICADO,
          SUM(CASE WHEN isnull(CRFESTADO, 4) in(-1, 0, 1, 2, 3, 4) and SFATIPDOC IN(0, 1, 16) THEN SFATOTFAC ELSE NULL END) -
          ISNULL(SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(0, 1, 16)THEN SFATOTFAC ELSE NULL END), 0) FACTURADO
          FROM GCVRADFACTUR 
          WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
          GROUP BY DAY(SFAFECFAC);`,
          [fechaInicio, fechaFin]
        );
      } else {
        return await this.radicacionRepository.manager.query(
          `SELECT
          DAY(SFAFECFAC) DIA,
          SUM(CASE WHEN CRFESTADO IN(-1, 0, 1, 2, 3) THEN CRDVALRAD ELSE NULL END) RADICADO,
          SUM(CASE WHEN isnull(CRFESTADO, 4) in(-1, 0, 1, 2, 3, 4) and SFATIPDOC IN(0, 1, 16) THEN SFATOTFAC ELSE NULL END) -
          ISNULL(SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(0, 1, 16)THEN SFATOTFAC ELSE NULL END), 0) FACTURADO
          FROM GCVRADFACTUR 
          WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
          AND ADNCENATE IN(@2, @3)
          GROUP BY DAY(SFAFECFAC);`,
          [fechaInicio, fechaFin, centro1, centro2]
        );
      }
    } else {
      return await this.radicacionRepository.manager.query(
        `SELECT
        DAY(SFAFECFAC) DIA,
        SUM(CASE WHEN CRFESTADO IN(-1, 0, 1, 2, 3) THEN CRDVALRAD ELSE NULL END) RADICADO,
        SUM(CASE WHEN isnull(CRFESTADO, 4) in(-1, 0, 1, 2, 3, 4) and SFATIPDOC IN(0, 1, 16) THEN SFATOTFAC ELSE NULL END) -
        ISNULL(SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL AND SFATIPDOC IN(0, 1, 16)THEN SFATOTFAC ELSE NULL END), 0) FACTURADO
        FROM GCVRADFACTUR 
        WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
        GROUP BY DAY(SFAFECFAC);`,
        [fechaInicio, fechaFin]
      );
    }
  }

  radicacionAcumulada = async (
    fechaInicio: string,
    fechaFin: string,
    centro1: number,
    centro2: number
  ) => {
    const res = await this.radAcumulada(
      fechaInicio,
      fechaFin,
      centro1,
      centro2
    );
    let i = 0;
    let dia = 0;
    let facturado = 0;
    let radicado = 0;
    const radicacionAcumulada: any[] = [];
    while (i < res.length) {
      dia = res[i].DIA;
      facturado += res[i].FACTURADO;
      radicado += res[i].RADICADO;
      radicacionAcumulada.push({
        DIA: dia,
        FACT: facturado,
        ACUMULADORADICADO: radicado,
      });
      i++;
    }
    return radicacionAcumulada;
  };

  async radicacionDiaria(
    fechaInicio: string,
    fechaFin: string,
    centro1: number,
    centro2: number
  ) {
    return await this.radicacionRepository.manager.query(
      ` SELECT
      DAY(SFAFECFAC) DIA,
      COUNT(SLNFACTUR) TOTALFACTURADA,
      COUNT(CRNRADFACC) TOTALRADICADO,
      COUNT(CASE WHEN SLNFACTUR IS NULL THEN NULL ELSE SLNFACTUR END) 
      - COUNT(CASE WHEN CRNRADFACC IS NOT NULL THEN CRNRADFACC ELSE NULL END)
      - COUNT(CASE WHEN CRNRADFACC IS NULL AND SFADOCANU = 1 THEN SFADOCANU ELSE NULL END) PENDIENTE,
      COUNT(CASE WHEN CRNRADFACC IS NULL AND SFADOCANU = 1 THEN SFADOCANU ELSE NULL END) ANULADAS
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 AND ADNCENATE IN(@2, @3)
      GROUP BY DAY(SFAFECFAC);`,
      [fechaInicio, fechaFin, centro1, centro2]
    );
  }

  async radicacionPorDocumentos(fechaInicio: string, fechaFin: string) {
    return await this.radicacionRepository.manager.query(
      `SELECT
      CASE WHEN SFATIPDOC = 0 THEN 'FACTURA PACIENTE'
           WHEN SFATIPDOC = 1 THEN 'FACTURA ENTIDAD' 
           WHEN SFATIPDOC = 16 THEN 'FACTURA GLOBAL PGP' ELSE NULL END AS SFATIPDOC,
      COUNT(SLNFACTUR) CANT,
      COUNT(CRNRADFACC) RAD,
      COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
      SUM(SFATOTFAC) FACTURADO,
      ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
      SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
      (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
      /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 
      AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
      GROUP BY SFATIPDOC;`,
      [fechaInicio, fechaFin]
    );
  }

  async radicacionPorEstado(fechaInicio: string, fechaFin: string) {
    return await this.radicacionRepository.manager.query(
      `
      SELECT 
      (CASE R.CRFESTADO
      WHEN 1 THEN 'RADICADO' 
          WHEN 2 THEN 'RADICADO ENTIDAD'
          WHEN 3 THEN 'RADICADO ANULADO'
        WHEN 0 THEN 'FACTURA NO RADICADA'
        ELSE 'FACTURA NO RADICADA'
        END)AS CRFESTADO,
      SUM(R.CANT) CANT,
      SUM(R.RAD) RAD,
      SUM(R.ANU) ANU,
      SUM(R.FACTURADO) FACTURADO,
      SUM(R.RADICABLE) RADICABLE,
      SUM(R.RADICADO) RADICADO,
      SUM(R.PORC) PORC
      FROM (SELECT
             ISNULL(CRFESTADO, 0)CRFESTADO,
           COUNT(SLNFACTUR) CANT, 
           COUNT(CRNRADFACC) RAD,
            COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
            SUM(SFATOTFAC) FACTURADO,
            ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
            SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
            (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
            /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
            FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 GROUP BY CRFESTADO) AS R
            --AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
            GROUP BY R.CRFESTADO;`,
      [fechaInicio, fechaFin]
    );
  }

  async radicacionPorEntidades(fechaInicio: string, fechaFin: string) {
    return await this.radicacionRepository.manager.query(
      `SELECT
      GENTERCER, GTRNOMBRE, COUNT(SLNFACTUR) CANT, COUNT(CRNRADFACC) RAD,
      COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
      SUM(SFATOTFAC) FACTURADO,
      ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
      SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
      (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
      /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
      AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
      GROUP BY GTRNOMBRE, GENTERCER;`,
      [fechaInicio, fechaFin]
    );
  }

  async radicacionPorContrato(
    fechaInicio: string,
    fechaFin: string,
    contrato: number
  ) {
    return await this.radicacionRepository.manager.query(
      `SELECT
      GDECODIGO, GDENOMBRE, COUNT(SLNFACTUR) CANT, COUNT(CRNRADFACC) RAD,
      COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
      SUM(SFATOTFAC) FACTURADO,
      ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
      SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
      (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
      /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 AND GENTERCER = @2
      AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
      GROUP BY GDECODIGO, GDENOMBRE;`,
      [fechaInicio, fechaFin, contrato]
    );
  }

  async radicacionPorUsuario(fechaInicio: string, fechaFin: string) {
    return await this.radicacionRepository.manager.query(
      `SELECT
      ISNULL(USUDESCON, 'USUARIO POR ASIGNAR') USUDESCON, 
      COUNT(SLNFACTUR) CANT, COUNT(CRNRADFACC) RAD,
      COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
      SUM(SFATOTFAC) FACTURADO,
      ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
      SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
      (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
      /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
      AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
      GROUP BY USUDESCON;`,
      [fechaInicio, fechaFin]
    );
  }

  async radicacionUsuarioPorEntidad(fechaInicio: string, fechaFin: string) {
    return await this.radicacionRepository.manager.query(
      `SELECT
      ISNULL(USUDESENT, 'USUARIO POR ASIGNAR') USUDESENT, 
      COUNT(SLNFACTUR) CANT, COUNT(CRNRADFACC) RAD,
      COUNT(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFADOCANU ELSE NULL END) ANU,
      SUM(SFATOTFAC) FACTURADO,
      ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)) RADICABLE,
      SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END) RADICADO,
      (SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN NULL ELSE CRDVALRAD END)
      /ISNULL(SUM(SFATOTFAC)-SUM(CASE WHEN SFADOCANU = 1 AND CRNRADFACC IS NULL THEN SFATOTFAC ELSE NULL END), SUM(SFATOTFAC)))*100 PORC
      FROM GCVRADFACTUR WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1 
      AND ISNULL(CRFESTADO, 4) IN(-1, 0, 1, 2, 4)
      GROUP BY USUDESENT;`,
      [fechaInicio, fechaFin]
    );
  }

  /**
   * RADICACION PENDIEENTE DE MESES ANTERIORES
   */
  async radicacionPendienteMesesAnteriores(
    fechaInicio: string,
    fechaFin: string
  ) {
    return await this.radicacionRepository.manager.query(
      `
      SELECT
      SFANUMFAC,
      SFATIPDOC,
      SFAFECFAC,
      SFATOTFAC
      FROM GCVRADFACTUR 
      WHERE CONVERT(DATE, SFAFECFAC, 103) BETWEEN @0 AND @1
      AND SFADOCANU = 0
      AND SFATIPDOC IN(1, 16)
      AND CRFFECRAD IS NULL
      `,
      [fechaInicio, fechaFin]
    );
  }

  async facturasSinRadicar() {
    return await this.radicacionRepository.manager.query(
      `
      SELECT 
      R.SFATIPDOC,
      R.SFANUMFAC, 
	    GT.TERNOMCOM,
      R.GDENOMBRE,
      R.SFAFECFAC,
	    (CC.CCVALOR + CC.CCVALDEB - (CC.CCVALCRE + CC.CCVALTRA + CC.CCVALABO)) SFATOTFAC,
      EAE.CRAENOMBRE
      FROM GCVRADFACTUR R
      LEFT JOIN CRNCXC C ON C.CXCDOCUME = R.SFANUMFAC
      LEFT JOIN CRNCXCC CC ON CC.CRNCXC = C.OID
      LEFT JOIN CRNACTENFACF AEF ON AEF.CRNCXC = C.OID
      LEFT JOIN CRNESTACTENT EAE ON EAE.OID = AEF.CRNESTACTENT
	    LEFT JOIN GENTERCER GT ON GT.OID = R.GENTERCER
      WHERE
      CRNRADFACC IS NULL
      AND SFADOCANU = 0 
      AND SFATIPDOC IN(0, 1, 16)
      AND CONVERT(DATE, SFAFECFAC, 103) > '01-01-2015'
      AND (CC.CCVALOR + CC.CCVALDEB - (CC.CCVALCRE + CC.CCVALTRA + CC.CCVALABO)) > 0
	    AND EAE.OID IS NULL
      ORDER BY SFAFECFAC
      `
    );
  }
}
